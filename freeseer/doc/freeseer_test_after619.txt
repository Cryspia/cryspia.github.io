running test
running egg_info
writing freeseer.egg-info\PKG-INFO
writing top-level names to freeseer.egg-info\top_level.txt
writing dependency_links to freeseer.egg-info\dependency_links.txt
writing entry points to freeseer.egg-info\entry_points.txt
reading manifest file 'freeseer.egg-info\SOURCES.txt'
reading manifest template 'MANIFEST.in'
writing manifest file 'freeseer.egg-info\SOURCES.txt'
running build_ext
============================= test session starts =============================
platform win32 -- Python 2.7.8 -- py-1.4.24 -- pytest-2.5.2
plugins: cov
collected 249 items / 1 skipped

freeseer/tests/framework/test_config.py .
freeseer/tests/framework/test_multimedia.py .....
freeseer/tests/framework/test_plugins.py ..F..
freeseer/tests/framework/test_presentation.py ....
freeseer/tests/framework/test_util.py ...
freeseer/tests/framework/test_youtube.py .....
freeseer/tests/framework/config/test_core.py ....................
freeseer/tests/framework/config/test_profile.py ..........
freeseer/tests/framework/config/options/test_boolean.py ................
freeseer/tests/framework/config/options/test_choice.py ................
freeseer/tests/framework/config/options/test_folder.py .F..F.F..........F..F.F.
freeseer/tests/framework/config/options/test_integer.py ................
freeseer/tests/framework/config/options/test_string.py ................
freeseer/tests/framework/config/persist/test_configparser.py ..
freeseer/tests/framework/config/persist/test_jsonstorage.py ..
freeseer/tests/framework/database/test_database.py FFFFFFFFFFFFFFFFFFFF
freeseer/tests/framework/database/test_database_reporting.py FFF.F
freeseer/tests/framework/database/test_rss_database.py FF.
freeseer/tests/frontend/test_cli_talk.py F..
freeseer/tests/frontend/configtool/test_config_tool.py ............
freeseer/tests/frontend/controller/test_server.py ................................
freeseer/tests/frontend/controller/test_validate.py ......
freeseer/tests/frontend/record/test_record.py .....
freeseer/tests/frontend/reporteditor/test_reporteditor.py ...
freeseer/tests/frontend/talkeditor/test_talkeditor.py ..
freeseer/tests/frontend/upload/test_youtube.py ..F.........
freeseer/tests/plugins/importer/rss_feedparser/test_rss_feedparser.py x

================================== FAILURES ===================================
_________________________ TestPlugins.test_output_bin _________________________

self = <freeseer.tests.framework.test_plugins.TestPlugins testMethod=test_output_bin>

    def test_output_bin(self):
        '''Check that output plugins are returning a gst.Bin object
    
            Verifies that get_output_bin() is returning the proper object.
            '''
        plugins = self.plugman.get_plugins_of_category("Output")
    
        for plugin in plugins:
            plugin.plugin_object.load_config(self.plugman)
>           plugin_bin = plugin.plugin_object.get_output_bin()

freeseer\tests\framework\test_plugins.py:122: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <yapsy_loaded_plugin_RTMP_Streaming_7.RTMPOutput object at 0x045C3E70>
audio = True, video = True, metadata = None

    def get_output_bin(self, audio=True, video=True, metadata=None):
        bin = gst.Bin()
    
        if metadata is not None:
            self.set_metadata(metadata)
    
        # Muxer
        muxer = gst.element_factory_make("flvmux", "muxer")
    
        # Setup metadata
        # set tag merge mode to GST_TAG_MERGE_REPLACE
        merge_mode = gst.TagMergeMode.__enum_values__[2]
    
        if metadata is not None:
            # Only set tag if metadata is set
            muxer.merge_tags(self.tags, merge_mode)
        muxer.set_tag_merge_mode(merge_mode)
    
        bin.add(muxer)
    
        # RTMP sink
>       rtmpsink = gst.element_factory_make('rtmpsink', 'rtmpsink')
E       ElementNotFoundError: rtmpsink

freeseer\plugins\output\rtmp_streaming\__init__.py:184: ElementNotFoundError
------------------------------- Captured stderr -------------------------------
2014-11-09 20:58:34,677 (   DEBUG) freeseer.framework.plugin               : Plugin manager initialized.
________________ TestFolderOptionNoDefault.test_decode_success ________________

self = <freeseer.tests.framework.config.options.test_folder.TestFolderOptionNoDefault testMethod=test_decode_success>

    def test_decode_success(self):
        '''
            Tests that decode succeeds in the correct scenarios.
            '''
        if not self.decode_success:
            self.fail('missing decode successful values')
        for in_value, out_value in self.decode_success:
>           decoded = self.option.decode(in_value)

freeseer\tests\framework\config\options\__init__.py:96: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <freeseer.framework.config.options.FolderOption object at 0x047E4A30>
value = '/tmp'

    def decode(self, value):
        if self.is_valid(value):
            return value
        else:
>           raise InvalidDecodeValueError(value)
E           InvalidDecodeValueError: Unable to decode value "/tmp"

freeseer\framework\config\options.py:106: InvalidDecodeValueError
________________ TestFolderOptionNoDefault.test_encode_success ________________

self = <freeseer.tests.framework.config.options.test_folder.TestFolderOptionNoDefault testMethod=test_encode_success>

    def test_encode_success(self):
        '''
            Tests that encode succeeds in the correct scenarios.
            '''
        if not self.encode_success:
            self.fail('missing encode successful values')
        for in_value, out_value in self.encode_success:
>           self.assertTrue(self.option.is_valid(in_value))
E           AssertionError: False is not true

freeseer\tests\framework\config\options\__init__.py:79: AssertionError
_______________ TestFolderOptionNoDefault.test_is_valid_success _______________

self = <freeseer.tests.framework.config.options.test_folder.TestFolderOptionNoDefault testMethod=test_is_valid_success>

    def test_is_valid_success(self):
        '''
            Tests that is_valid succeeds in the correct scenarios.
            '''
        if not self.valid_success:
            self.fail('missing is_valid successful values')
        for value in self.valid_success:
>           self.assertTrue(self.option.is_valid(value))
E           AssertionError: False is not true

freeseer\tests\framework\config\options\__init__.py:63: AssertionError
_______________ TestFolderOptionWithDefault.test_decode_success _______________

self = <freeseer.tests.framework.config.options.test_folder.TestFolderOptionWithDefault testMethod=test_decode_success>

    def test_decode_success(self):
        '''
            Tests that decode succeeds in the correct scenarios.
            '''
        if not self.decode_success:
            self.fail('missing decode successful values')
        for in_value, out_value in self.decode_success:
>           decoded = self.option.decode(in_value)

freeseer\tests\framework\config\options\__init__.py:96: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <freeseer.framework.config.options.FolderOption object at 0x047FD970>
value = '/tmp'

    def decode(self, value):
        if self.is_valid(value):
            return value
        else:
>           raise InvalidDecodeValueError(value)
E           InvalidDecodeValueError: Unable to decode value "/tmp"

freeseer\framework\config\options.py:106: InvalidDecodeValueError
_______________ TestFolderOptionWithDefault.test_encode_success _______________

self = <freeseer.tests.framework.config.options.test_folder.TestFolderOptionWithDefault testMethod=test_encode_success>

    def test_encode_success(self):
        '''
            Tests that encode succeeds in the correct scenarios.
            '''
        if not self.encode_success:
            self.fail('missing encode successful values')
        for in_value, out_value in self.encode_success:
>           self.assertTrue(self.option.is_valid(in_value))
E           AssertionError: False is not true

freeseer\tests\framework\config\options\__init__.py:79: AssertionError
______________ TestFolderOptionWithDefault.test_is_valid_success ______________

self = <freeseer.tests.framework.config.options.test_folder.TestFolderOptionWithDefault testMethod=test_is_valid_success>

    def test_is_valid_success(self):
        '''
            Tests that is_valid succeeds in the correct scenarios.
            '''
        if not self.valid_success:
            self.fail('missing is_valid successful values')
        for value in self.valid_success:
>           self.assertTrue(self.option.is_valid(value))
E           AssertionError: False is not true

freeseer\tests\framework\config\options\__init__.py:63: AssertionError
_____________________________ test_first_talk_id ______________________________

db = <freeseer.framework.database.QtDBConnector object at 0x0477F250>
presentation = <freeseer.framework.presentation.Presentation object at 0x0485AB70>

    def test_first_talk_id(db, presentation):
        """Assert the first presentation record id in the database is given the identity '1'"""
        no_ids = db.get_talk_ids()
        assert not no_ids.first()  # Assert that there are no ids in the database.
    
        db.insert_presentation(presentation)
    
        talk_ids = db.get_talk_ids()
>       assert talk_ids.first()
E       assert <built-in method first of QSqlQuery object at 0x0485B070>()
E        +  where <built-in method first of QSqlQuery object at 0x0485B070> = <PyQt4.QtSql.QSqlQuery object at 0x0485B070>.first

freeseer\tests\framework\database\test_database.py:43: AssertionError
------------------------------- Captured stderr -------------------------------
2014-11-09 20:58:35,948 (   DEBUG) freeseer.framework.plugin               : Plugin manager initialized.\nQSqlDatabase: QSQLITE driver not loaded\nQSqlDatabase: available drivers: \nQSqlDatabase: an instance of QCoreApplication is required for loading driver plugins\nQSqlDatabasePrivate::removeDatabase: connection 'qt_sql_default_connection' is still in use, all queries will cease to work.\nQSqlDatabasePrivate::addDatabase: duplicate connection name 'qt_sql_default_connection', old connection removed.\n2014-11-09 20:58:35,948 (   ERROR) freeseer.framework.database             : Unable to create talkdb file.\nQSqlQuery::exec: database not open\nQSqlQuery::prepare: database not open\n2014-11-09 20:58:35,950 (    INFO) freeseer.framework.database             : Talk added: Alice and Eve - MITM presentation attacks, Time: \ufffd\ufffd\ufffd\ufffd 11\ufffd\ufffd 9 21:03:35 2014 - \ufffd\ufffd\ufffd\ufffd 11\ufffd\ufffd 9 21:08:35 2014\nQSqlQuery::exec: database not open
__________________________ test_get_presentation_id ___________________________

db = <freeseer.framework.database.QtDBConnector object at 0x046EAE30>
presentation = <freeseer.framework.presentation.Presentation object at 0x048F3A10>

    def test_get_presentation_id(db, presentation):
        """Assert that a valid record id is returned for a given presntation object in the database"""
        assert not db.get_presentation_id(presentation)  # Test that None is returned when a record does not exist.
    
        db.insert_presentation(presentation)
        talk_id = db.get_presentation_id(presentation)
>       assert talk_id == '1'
E       assert None == '1'

freeseer\tests\framework\database\test_database.py:56: AssertionError
------------------------------- Captured stderr -------------------------------
2014-11-09 20:58:36,048 (   DEBUG) freeseer.framework.plugin               : Plugin manager initialized.\nQSqlDatabase: QSQLITE driver not loaded\nQSqlDatabase: available drivers: \nQSqlDatabase: an instance of QCoreApplication is required for loading driver plugins\nQSqlDatabasePrivate::removeDatabase: connection 'qt_sql_default_connection' is still in use, all queries will cease to work.\nQSqlDatabasePrivate::addDatabase: duplicate connection name 'qt_sql_default_connection', old connection removed.\n2014-11-09 20:58:36,049 (   ERROR) freeseer.framework.database             : Unable to create talkdb file.\nQSqlQuery::exec: database not open\nQSqlQuery::prepare: database not open\n2014-11-09 20:58:36,049 (    INFO) freeseer.framework.database             : Talk added: Alice and Eve - MITM presentation attacks, Time: \ufffd\ufffd\ufffd\ufffd 11\ufffd\ufffd 9 21:03:36 2014 - \ufffd\ufffd\ufffd\ufffd 11\ufffd\ufffd 9 21:08:36 2014\nQSqlQuery::exec: database not open
___________________________ test_add_talks_from_csv ___________________________

db = <freeseer.framework.database.QtDBConnector object at 0x048D8150>

    def test_add_talks_from_csv(db):
        """Assert that presentations can be loaded to the database from a csv file"""
        dirname = os.path.dirname(__file__)
        fname = os.path.join(dirname, os.pardir, 'sample_talks.csv')
    
        presentation = Presentation('Building NetBSD', 'David Maxwell')
    
        assert not db.presentation_exists(presentation)
        db.add_talks_from_csv(fname)
>       assert db.presentation_exists(presentation)
E       assert <bound method QtDBConnector.presentation_exists of <freeseer.framework.database.QtDBConnector object at 0x048D8150>>(<freeseer.framework.presentation.Presentation object at 0x047FAAD0>)
E        +  where <bound method QtDBConnector.presentation_exists of <freeseer.framework.database.QtDBConnector object at 0x048D8150>> = <freeseer.framework.database.QtDBConnector object at 0x048D8150>.presentation_exists

freeseer\tests\framework\database\test_database.py:68: AssertionError
------------------------------- Captured stderr -------------------------------
2014-11-09 20:58:36,145 (   DEBUG) freeseer.framework.plugin               : Plugin manager initialized.\nQSqlDatabase: QSQLITE driver not loaded\nQSqlDatabase: available drivers: \nQSqlDatabase: an instance of QCoreApplication is required for loading driver plugins\nQSqlDatabasePrivate::removeDatabase: connection 'qt_sql_default_connection' is still in use, all queries will cease to work.\nQSqlDatabasePrivate::addDatabase: duplicate connection name 'qt_sql_default_connection', old connection removed.\n2014-11-09 20:58:36,145 (   ERROR) freeseer.framework.database             : Unable to create talkdb file.\nQSqlQuery::exec: database not open\nQSqlQuery::prepare: database not open\n2014-11-09 20:58:36,148 (    INFO) freeseer.framework.database             : Talk added: Thanh Ha - Intro to Freeseer, Time:  - \nQSqlQuery::prepare: database not open\n2014-11-09 20:58:36,150 (    INFO) freeseer.framework.database             : Talk added: Chris Aniszczyk - Git at Eclipse.org: EGit, JGit and Gerrit, Time: 2011-08-22T15:52 - \nQSqlQuery::prepare: database not open\n2014-11-09 20:58:36,150 (    INFO) freeseer.framework.database             : Talk added: David Maxwell - Building NetBSD, Time: 2011-08-17T20:29 - \nQSqlQuery::prepare: database not open\n2014-11-09 20:58:36,150 (    INFO) freeseer.framework.database             : Talk added: Edward Ocampo-Gooding [@edwardog] - Explosions, fast cars, and hot, naked data: <3 from Open Data Ottawa, Time: None - \nQSqlQuery::prepare: database not open\n2014-11-09 20:58:36,151 (    INFO) freeseer.framework.database             : Talk added: Fred Dixon - Lecture Broadcast and Capture using BigBlueButton, Time: None - \nQSqlQuery::prepare: database not open\n2014-11-09 20:58:36,151 (    INFO) freeseer.framework.database             : Talk added: Fr\ufffd\ufffdd\ufffd\ufffdric Harper - Put the 5 in HTML, Time: 2011-08-19T10:21 - \nQSqlQuery::prepare: database not open\n2014-11-09 20:58:36,151 (    INFO) freeseer.framework.database             : Talk added: Patrick Naubert - The Architecture of IRCan's High Resiliency Environment, Time: None - \nQSqlQuery::prepare: database not open\n2014-11-09 20:58:36,151 (    INFO) freeseer.framework.database             : Talk added: Joseph Potvin, Coordinator, ERA-ART - What does the financial crisis have to do with software?, Time: None - \nQSqlQuery::prepare: database not open\n2014-11-09 20:58:36,151 (    INFO) freeseer.framework.database             : Talk added: Mike Brock - The power of code generation: Dependency Injection in the Browser, Time: 2011-08-27T11:00 - \nQSqlQuery::prepare: database not open\n2014-11-09 20:58:36,151 (    INFO) freeseer.framework.database             : Talk added: Michael Richardson - Test Driven Development web development with postgres or mysql., Time: None - \nQSqlQuery::prepare: database not open\n2014-11-09 20:58:36,151 (    INFO) freeseer.framework.database             : Talk added: Mekki MacAulay - Imploding vs. drifting apart: the shifting density of free/libre/open source communities, Time: None - \nQSqlQuery::prepare: database not open\n2014-11-09 20:58:36,151 (    INFO) freeseer.framework.database             : Talk added: Pascal St-Jean - Tiki Wiki CMS Groupware - Software the Wiki Way, Time: None - \nQSqlQuery::prepare: database not open\n2014-11-09 20:58:36,153 (    INFO) freeseer.framework.database             : Talk added: Richard Weait - Open Data - Successes, Pitfalls and Advocacy, Time: None - \nQSqlQuery::prepare: database not open\n2014-11-09 20:58:36,153 (    INFO) freeseer.framework.database             : Talk added: Richard Weait - OpenStreetMap - Location, Location, Location, Time: None - \nQSqlQuery::prepare: database not open\n2014-11-09 20:58:36,153 (    INFO) freeseer.framework.database             : Talk added: Steve Singer - PostgreSQL replication, Time: None - \nQSqlQuery::prepare: database not open\n2014-11-09 20:58:36,153 (    INFO) freeseer.framework.database             : Talk added: Tim Inkpen - Why We Need to Open-Source The Monetary System, Time: None - \nQSqlQuery::prepare: database not open\n2014-11-09 20:58:36,153 (    INFO) freeseer.framework.database             : Talk added: Yanick Champoux - Dancer: a Perl Micro Web Application Framework, Time: None - \nQSqlQuery::exec: database not open
__________________________ test_export_talks_to_csv ___________________________

db = <freeseer.framework.database.QtDBConnector object at 0x04923390>
tmpdir = local('c:\\users\\azure\\appdata\\local\\temp\\pytest-51\\test_export_talks_to_csv0')

    def test_export_talks_to_csv(db, tmpdir):
        """Assert that presentations from the database can be exported to a csv file"""
        temp_csv = str(tmpdir.join('temp.csv'))
        presentation1 = Presentation('Managing map data in a database', 'Andrew Ross')
        presentation2 = Presentation('Building NetBSD', 'David Maxwell')
        presentation3 = Presentation('Faking it till you make it', 'John Doe')
        db.insert_presentation(presentation1)
        db.insert_presentation(presentation2)
        db.insert_presentation(presentation3)
        db.export_talks_to_csv(temp_csv)
    
        expected_csv_lines = [
            'Title,Speaker,Abstract,Category,Event,Room,Date,StartTime,EndTime\r\n',
            'Managing map data in a database,Andrew Ross,,,Default,Default,,,\r\n',
            'Building NetBSD,David Maxwell,,,Default,Default,,,\r\n',
            'Faking it till you make it,John Doe,,,Default,Default,,,\r\n'
        ]
    
        with open(temp_csv) as fd:
            csv_lines = fd.readlines()
    
>       assert csv_lines == expected_csv_lines
E       assert ['Title,Speak...,EndTime\r\n'] == ['Title,Speake...fault,,,\r\n']
E         Right contains more items, first extra item: 'Managing map data in a database,Andrew Ross,,,Default,Default,,,\r\n'

freeseer\tests\framework\database\test_database.py:99: AssertionError
------------------------------- Captured stderr -------------------------------
2014-11-09 20:58:36,249 (   DEBUG) freeseer.framework.plugin               : Plugin manager initialized.
QSqlDatabase: QSQLITE driver not loaded
QSqlDatabase: available drivers: 
QSqlDatabase: an instance of QCoreApplication is required for loading driver plugins
QSqlDatabasePrivate::removeDatabase: connection 'qt_sql_default_connection' is still in use, all queries will cease to work.
QSqlDatabasePrivate::addDatabase: duplicate connection name 'qt_sql_default_connection', old connection removed.
2014-11-09 20:58:36,249 (   ERROR) freeseer.framework.database             : Unable to create talkdb file.
QSqlQuery::prepare: database not open
2014-11-09 20:58:36,250 (    INFO) freeseer.framework.database             : Talk added: Andrew Ross - Managing map data in a database, Time:  - 
QSqlQuery::prepare: database not open
2014-11-09 20:58:36,250 (    INFO) freeseer.framework.database             : Talk added: David Maxwell - Building NetBSD, Time:  - 
QSqlQuery::prepare: database not open
2014-11-09 20:58:36,250 (    INFO) freeseer.framework.database             : Talk added: John Doe - Faking it till you make it, Time:  - 
QSqlQuery::exec: database not open
__________________________ test_insert_presentation ___________________________

db = <freeseer.framework.database.QtDBConnector object at 0x049E98B0>
presentation = <freeseer.framework.presentation.Presentation object at 0x04A2DF30>

    def test_insert_presentation(db, presentation):
        """Assert that a presentation's fields are correctly inserted into the database"""
        assert not db.presentation_exists(presentation)
        db.insert_presentation(presentation)
    
        talks = db.get_talks()
>       assert talks.first()
E       assert <built-in method first of QSqlQuery object at 0x04A3AEF0>()
E        +  where <built-in method first of QSqlQuery object at 0x04A3AEF0> = <PyQt4.QtSql.QSqlQuery object at 0x04A3AEF0>.first

freeseer\tests\framework\database\test_database.py:111: AssertionError
------------------------------- Captured stderr -------------------------------
2014-11-09 20:58:36,359 (   DEBUG) freeseer.framework.plugin               : Plugin manager initialized.\nQSqlDatabase: QSQLITE driver not loaded\nQSqlDatabase: available drivers: \nQSqlDatabase: an instance of QCoreApplication is required for loading driver plugins\nQSqlDatabasePrivate::removeDatabase: connection 'qt_sql_default_connection' is still in use, all queries will cease to work.\nQSqlDatabasePrivate::addDatabase: duplicate connection name 'qt_sql_default_connection', old connection removed.\n2014-11-09 20:58:36,361 (   ERROR) freeseer.framework.database             : Unable to create talkdb file.\nQSqlQuery::exec: database not open\nQSqlQuery::prepare: database not open\n2014-11-09 20:58:36,361 (    INFO) freeseer.framework.database             : Talk added: Alice and Eve - MITM presentation attacks, Time: \ufffd\ufffd\ufffd\ufffd 11\ufffd\ufffd 9 21:03:36 2014 - \ufffd\ufffd\ufffd\ufffd 11\ufffd\ufffd 9 21:08:36 2014\nQSqlQuery::exec: database not open
__________________________ test_update_presentation ___________________________

db = <freeseer.framework.database.QtDBConnector object at 0x048E6350>
presentation = <freeseer.framework.presentation.Presentation object at 0x04A7EE90>

    def test_update_presentation(db, presentation):
        """Assert that a given presentation is updated with out side effects given its record id"""
        assert not db.presentation_exists(presentation)
        db.insert_presentation(presentation)
    
        # Update the inserted presentation
        presentation.title = 'Presentation Title Redacted'
        db.update_presentation('1', presentation)
    
        updated_talks = db.get_talks()
        updated_talks.first()
        new_record = updated_talks.record()
    
        # Check the update worked.
>       assert updated_talks.value(new_record.indexOf('title')).toString() == presentation.title
E       assert PyQt4.QtCore.QString(u'') == 'Presentation Title Redacted'
E        +  where PyQt4.QtCore.QString(u'') = <built-in method toString of QVariant object at 0x04A8DA70>()
E        +    where <built-in method toString of QVariant object at 0x04A8DA70> = <PyQt4.QtCore.QVariant object at 0x04A8DA70>.toString
E        +      where <PyQt4.QtCore.QVariant object at 0x04A8DA70> = <built-in method value of QSqlQuery object at 0x04A8D8B0>(-1)
E        +        where <built-in method value of QSqlQuery object at 0x04A8D8B0> = <PyQt4.QtSql.QSqlQuery object at 0x04A8D8B0>.value
E        +        and   -1 = <built-in method indexOf of QSqlRecord object at 0x04A8DA30>('title')
E        +          where <built-in method indexOf of QSqlRecord object at 0x04A8DA30> = <PyQt4.QtSql.QSqlRecord object at 0x04A8DA30>.indexOf
E        +  and   'Presentation Title Redacted' = <freeseer.framework.presentation.Presentation object at 0x04A7EE90>.title

freeseer\tests\framework\database\test_database.py:145: AssertionError
------------------------------- Captured stderr -------------------------------
2014-11-09 20:58:36,456 (   DEBUG) freeseer.framework.plugin               : Plugin manager initialized.\nQSqlDatabase: QSQLITE driver not loaded\nQSqlDatabase: available drivers: \nQSqlDatabase: an instance of QCoreApplication is required for loading driver plugins\nQSqlDatabasePrivate::removeDatabase: connection 'qt_sql_default_connection' is still in use, all queries will cease to work.\nQSqlDatabasePrivate::addDatabase: duplicate connection name 'qt_sql_default_connection', old connection removed.\n2014-11-09 20:58:36,456 (   ERROR) freeseer.framework.database             : Unable to create talkdb file.\nQSqlQuery::exec: database not open\nQSqlQuery::prepare: database not open\n2014-11-09 20:58:36,457 (    INFO) freeseer.framework.database             : Talk added: Alice and Eve - MITM presentation attacks, Time: \ufffd\ufffd\ufffd\ufffd 11\ufffd\ufffd 9 21:03:36 2014 - \ufffd\ufffd\ufffd\ufffd 11\ufffd\ufffd 9 21:08:36 2014\nQSqlQuery::prepare: database not open\n2014-11-09 20:58:36,457 (    INFO) freeseer.framework.database             : Talk 1 updated: Alice and Eve - Presentation Title Redacted\nQSqlQuery::exec: database not open\nQSqlQuery::value: not positioned on a valid record
__________________________ test_delete_presentation ___________________________

db = <freeseer.framework.database.QtDBConnector object at 0x04A585D0>
presentation = <freeseer.framework.presentation.Presentation object at 0x04B38E70>

    def test_delete_presentation(db, presentation):
        """Assert that a presentation is removed with out side effects from the database"""
        # delete a valid presentation
        assert not db.presentation_exists(presentation)
        db.insert_presentation(presentation)
>       assert db.presentation_exists(presentation)
E       assert <bound method QtDBConnector.presentation_exists of <freeseer.framework.database.QtDBConnector object at 0x04A585D0>>(<freeseer.framework.presentation.Presentation object at 0x04B38E70>)
E        +  where <bound method QtDBConnector.presentation_exists of <freeseer.framework.database.QtDBConnector object at 0x04A585D0>> = <freeseer.framework.database.QtDBConnector object at 0x04A585D0>.presentation_exists

freeseer\tests\framework\database\test_database.py:165: AssertionError
------------------------------- Captured stderr -------------------------------
2014-11-09 20:58:36,552 (   DEBUG) freeseer.framework.plugin               : Plugin manager initialized.\nQSqlDatabase: QSQLITE driver not loaded\nQSqlDatabase: available drivers: \nQSqlDatabase: an instance of QCoreApplication is required for loading driver plugins\nQSqlDatabasePrivate::removeDatabase: connection 'qt_sql_default_connection' is still in use, all queries will cease to work.\nQSqlDatabasePrivate::addDatabase: duplicate connection name 'qt_sql_default_connection', old connection removed.\n2014-11-09 20:58:36,552 (   ERROR) freeseer.framework.database             : Unable to create talkdb file.\nQSqlQuery::exec: database not open\nQSqlQuery::prepare: database not open\n2014-11-09 20:58:36,555 (    INFO) freeseer.framework.database             : Talk added: Alice and Eve - MITM presentation attacks, Time: \ufffd\ufffd\ufffd\ufffd 11\ufffd\ufffd 9 21:03:36 2014 - \ufffd\ufffd\ufffd\ufffd 11\ufffd\ufffd 9 21:08:36 2014\nQSqlQuery::exec: database not open
_____________________________ test_clear_database _____________________________

db = <freeseer.framework.database.QtDBConnector object at 0x04B325B0>
presentation = <freeseer.framework.presentation.Presentation object at 0x04B20DD0>

    def test_clear_database(db, presentation):
        """Assert that the presentation table is cleared"""
        assert not db.presentation_exists(presentation)
        db.insert_presentation(presentation)
>       assert db.presentation_exists(presentation)
E       assert <bound method QtDBConnector.presentation_exists of <freeseer.framework.database.QtDBConnector object at 0x04B325B0>>(<freeseer.framework.presentation.Presentation object at 0x04B20DD0>)
E        +  where <bound method QtDBConnector.presentation_exists of <freeseer.framework.database.QtDBConnector object at 0x04B325B0>> = <freeseer.framework.database.QtDBConnector object at 0x04B325B0>.presentation_exists

freeseer\tests\framework\database\test_database.py:182: AssertionError
------------------------------- Captured stderr -------------------------------
2014-11-09 20:58:36,648 (   DEBUG) freeseer.framework.plugin               : Plugin manager initialized.\nQSqlDatabase: QSQLITE driver not loaded\nQSqlDatabase: available drivers: \nQSqlDatabase: an instance of QCoreApplication is required for loading driver plugins\nQSqlDatabasePrivate::removeDatabase: connection 'qt_sql_default_connection' is still in use, all queries will cease to work.\nQSqlDatabasePrivate::addDatabase: duplicate connection name 'qt_sql_default_connection', old connection removed.\n2014-11-09 20:58:36,650 (   ERROR) freeseer.framework.database             : Unable to create talkdb file.\nQSqlQuery::exec: database not open\nQSqlQuery::prepare: database not open\n2014-11-09 20:58:36,651 (    INFO) freeseer.framework.database             : Talk added: Alice and Eve - MITM presentation attacks, Time: \ufffd\ufffd\ufffd\ufffd 11\ufffd\ufffd 9 21:03:36 2014 - \ufffd\ufffd\ufffd\ufffd 11\ufffd\ufffd 9 21:08:36 2014\nQSqlQuery::exec: database not open
______________________________ test_get_talk_ids ______________________________

db = <freeseer.framework.database.QtDBConnector object at 0x04AEF510>
presentation = <freeseer.framework.presentation.Presentation object at 0x04AF5210>

    def test_get_talk_ids(db, presentation):
        """Assert that presentation record ids are returned from the database presentation table"""
        assert not db.presentation_exists(presentation)
        db.insert_presentation(presentation)
    
        talk_ids = db.get_talk_ids()
        talk_ids.next()
        talk_id_record = talk_ids.record()
>       assert talk_id_record.value(talk_id_record.indexOf('id')).toString() == '1'
E       assert PyQt4.QtCore.QString(u'') == '1'
E        +  where PyQt4.QtCore.QString(u'') = <built-in method toString of QVariant object at 0x04C0E5F0>()
E        +    where <built-in method toString of QVariant object at 0x04C0E5F0> = <PyQt4.QtCore.QVariant object at 0x04C0E5F0>.toString
E        +      where <PyQt4.QtCore.QVariant object at 0x04C0E5F0> = <built-in method value of QSqlRecord object at 0x04C0E5B0>(-1)
E        +        where <built-in method value of QSqlRecord object at 0x04C0E5B0> = <PyQt4.QtSql.QSqlRecord object at 0x04C0E5B0>.value
E        +        and   -1 = <built-in method indexOf of QSqlRecord object at 0x04C0E5B0>('id')
E        +          where <built-in method indexOf of QSqlRecord object at 0x04C0E5B0> = <PyQt4.QtSql.QSqlRecord object at 0x04C0E5B0>.indexOf

freeseer\tests\framework\database\test_database.py:195: AssertionError
------------------------------- Captured stderr -------------------------------
2014-11-09 20:58:36,746 (   DEBUG) freeseer.framework.plugin               : Plugin manager initialized.\nQSqlDatabase: QSQLITE driver not loaded\nQSqlDatabase: available drivers: \nQSqlDatabase: an instance of QCoreApplication is required for loading driver plugins\nQSqlDatabasePrivate::removeDatabase: connection 'qt_sql_default_connection' is still in use, all queries will cease to work.\nQSqlDatabasePrivate::addDatabase: duplicate connection name 'qt_sql_default_connection', old connection removed.\n2014-11-09 20:58:36,746 (   ERROR) freeseer.framework.database             : Unable to create talkdb file.\nQSqlQuery::exec: database not open\nQSqlQuery::prepare: database not open\n2014-11-09 20:58:36,747 (    INFO) freeseer.framework.database             : Talk added: Alice and Eve - MITM presentation attacks, Time: \ufffd\ufffd\ufffd\ufffd 11\ufffd\ufffd 9 21:03:36 2014 - \ufffd\ufffd\ufffd\ufffd 11\ufffd\ufffd 9 21:08:36 2014\nQSqlQuery::exec: database not open
___________________________ test_get_talks_by_event ___________________________

db = <freeseer.framework.database.QtDBConnector object at 0x04B0FCD0>
presentation = <freeseer.framework.presentation.Presentation object at 0x04C364F0>

    def test_get_talks_by_event(db, presentation):
        """Assert that presentations can be retrieved from the database given an event name"""
        assert not db.presentation_exists(presentation)
        db.insert_presentation(presentation)
    
        talk_by_event = db.get_talks_by_event(presentation.event)
>       assert talk_by_event.first()
E       assert <built-in method first of QSqlQuery object at 0x04C37EF0>()
E        +  where <built-in method first of QSqlQuery object at 0x04C37EF0> = <PyQt4.QtSql.QSqlQuery object at 0x04C37EF0>.first

freeseer\tests\framework\database\test_database.py:205: AssertionError
------------------------------- Captured stderr -------------------------------
2014-11-09 20:58:36,845 (   DEBUG) freeseer.framework.plugin               : Plugin manager initialized.\nQSqlDatabase: QSQLITE driver not loaded\nQSqlDatabase: available drivers: \nQSqlDatabase: an instance of QCoreApplication is required for loading driver plugins\nQSqlDatabasePrivate::removeDatabase: connection 'qt_sql_default_connection' is still in use, all queries will cease to work.\nQSqlDatabasePrivate::addDatabase: duplicate connection name 'qt_sql_default_connection', old connection removed.\n2014-11-09 20:58:36,845 (   ERROR) freeseer.framework.database             : Unable to create talkdb file.\nQSqlQuery::exec: database not open\nQSqlQuery::prepare: database not open\n2014-11-09 20:58:36,846 (    INFO) freeseer.framework.database             : Talk added: Alice and Eve - MITM presentation attacks, Time: \ufffd\ufffd\ufffd\ufffd 11\ufffd\ufffd 9 21:03:36 2014 - \ufffd\ufffd\ufffd\ufffd 11\ufffd\ufffd 9 21:08:36 2014\nQSqlQuery::exec: database not open
___________________________ test_get_talks_by_room ____________________________

db = <freeseer.framework.database.QtDBConnector object at 0x04C2B770>
presentation = <freeseer.framework.presentation.Presentation object at 0x04C842D0>

    def test_get_talks_by_room(db, presentation):
        """Assert that presentations can be retrieved from the database given a room"""
        assert not db.presentation_exists(presentation)
        db.insert_presentation(presentation)
    
        talk_by_room = db.get_talks_by_room(presentation.room)
>       assert talk_by_room.first()
E       assert <built-in method first of QSqlQuery object at 0x04C876B0>()
E        +  where <built-in method first of QSqlQuery object at 0x04C876B0> = <PyQt4.QtSql.QSqlQuery object at 0x04C876B0>.first

freeseer\tests\framework\database\test_database.py:220: AssertionError
------------------------------- Captured stderr -------------------------------
2014-11-09 20:58:36,943 (   DEBUG) freeseer.framework.plugin               : Plugin manager initialized.\nQSqlDatabase: QSQLITE driver not loaded\nQSqlDatabase: available drivers: \nQSqlDatabase: an instance of QCoreApplication is required for loading driver plugins\nQSqlDatabasePrivate::removeDatabase: connection 'qt_sql_default_connection' is still in use, all queries will cease to work.\nQSqlDatabasePrivate::addDatabase: duplicate connection name 'qt_sql_default_connection', old connection removed.\n2014-11-09 20:58:36,943 (   ERROR) freeseer.framework.database             : Unable to create talkdb file.\nQSqlQuery::exec: database not open\nQSqlQuery::prepare: database not open\n2014-11-09 20:58:36,944 (    INFO) freeseer.framework.database             : Talk added: Alice and Eve - MITM presentation attacks, Time: \ufffd\ufffd\ufffd\ufffd 11\ufffd\ufffd 9 21:03:36 2014 - \ufffd\ufffd\ufffd\ufffd 11\ufffd\ufffd 9 21:08:36 2014\nQSqlQuery::exec: database not open
_______________________ test_get_talks_by_room_and_time _______________________

db = <freeseer.framework.database.QtDBConnector object at 0x04C6C830>
presentation = <freeseer.framework.presentation.Presentation object at 0x04AEC490>

    def test_get_talks_by_room_and_time(db, presentation):
        """Assert that presentations starting after the current date can be retrieved from the database given a room"""
        assert not db.presentation_exists(presentation)
        db.insert_presentation(presentation)
    
        # The presentation should be returned because it starts later than the current date.
        talks = db.get_talks_by_room_and_time(presentation.room)
>       assert talks.first()
E       assert <built-in method first of QSqlQuery object at 0x04CBD470>()
E        +  where <built-in method first of QSqlQuery object at 0x04CBD470> = <PyQt4.QtSql.QSqlQuery object at 0x04CBD470>.first

freeseer\tests\framework\database\test_database.py:236: AssertionError
------------------------------- Captured stderr -------------------------------
2014-11-09 20:58:37,071 (   DEBUG) freeseer.framework.plugin               : Plugin manager initialized.\nQSqlDatabase: QSQLITE driver not loaded\nQSqlDatabase: available drivers: \nQSqlDatabase: an instance of QCoreApplication is required for loading driver plugins\nQSqlDatabasePrivate::addDatabase: duplicate connection name 'qt_sql_default_connection', old connection removed.\n2014-11-09 20:58:37,072 (   ERROR) freeseer.framework.database             : Unable to create talkdb file.\nQSqlQuery::exec: database not open\nQSqlQuery::prepare: database not open\n2014-11-09 20:58:37,072 (    INFO) freeseer.framework.database             : Talk added: Alice and Eve - MITM presentation attacks, Time: \ufffd\ufffd\ufffd\ufffd 11\ufffd\ufffd 9 21:03:37 2014 - \ufffd\ufffd\ufffd\ufffd 11\ufffd\ufffd 9 21:08:37 2014\nQSqlQuery::exec: database not open
________________________ test_get_talks_between_dates _________________________

db = <freeseer.framework.database.QtDBConnector object at 0x04C07030>
presentation = <freeseer.framework.presentation.Presentation object at 0x048CD5B0>

    def test_get_talks_between_dates(db, presentation):
        """Assert that presentations from the database can be retrieved given two dates"""
        db.insert_presentation(presentation)
    
        current_time = QtCore.QDateTime().currentDateTime()
        time_before_presentation = current_time.date().toString(1)
        time_after_presentation = current_time.addSecs(60 * 60).date().toString(1)
    
        talk_id = db.get_talk_between_dates(presentation.event, presentation.room,
                                           time_before_presentation, time_after_presentation)
>       assert talk_id == '1'
E       assert None == '1'

freeseer\tests\framework\database\test_database.py:252: AssertionError
------------------------------- Captured stderr -------------------------------
2014-11-09 20:58:37,170 (   DEBUG) freeseer.framework.plugin               : Plugin manager initialized.\nQSqlDatabase: QSQLITE driver not loaded\nQSqlDatabase: available drivers: \nQSqlDatabase: an instance of QCoreApplication is required for loading driver plugins\nQSqlDatabasePrivate::removeDatabase: connection 'qt_sql_default_connection' is still in use, all queries will cease to work.\nQSqlDatabasePrivate::addDatabase: duplicate connection name 'qt_sql_default_connection', old connection removed.\n2014-11-09 20:58:37,170 (   ERROR) freeseer.framework.database             : Unable to create talkdb file.\nQSqlQuery::prepare: database not open\n2014-11-09 20:58:37,171 (    INFO) freeseer.framework.database             : Talk added: Alice and Eve - MITM presentation attacks, Time: \ufffd\ufffd\ufffd\ufffd 11\ufffd\ufffd 9 21:03:37 2014 - \ufffd\ufffd\ufffd\ufffd 11\ufffd\ufffd 9 21:08:37 2014\nQSqlQuery::exec: database not open
__________________________ test_presentation_exists ___________________________

db = <freeseer.framework.database.QtDBConnector object at 0x04C5D9F0>
presentation = <freeseer.framework.presentation.Presentation object at 0x045A0F70>

    def test_presentation_exists(db, presentation):
        """Assert that a given presentation exists in the database"""
        empty_result = QtSql.QSqlQuery('SELECT * FROM presentations')
        assert not empty_result.first()  # There should be no presentations
        assert not db.presentation_exists(presentation)  # This should also be false
        db.insert_presentation(presentation)
        result = QtSql.QSqlQuery('SELECT * FROM presentations')
>       assert result.first()
E       assert <built-in method first of QSqlQuery object at 0x04D2F830>()
E        +  where <built-in method first of QSqlQuery object at 0x04D2F830> = <PyQt4.QtSql.QSqlQuery object at 0x04D2F830>.first

freeseer\tests\framework\database\test_database.py:266: AssertionError
------------------------------- Captured stderr -------------------------------
2014-11-09 20:58:37,266 (   DEBUG) freeseer.framework.plugin               : Plugin manager initialized.\nQSqlDatabase: QSQLITE driver not loaded\nQSqlDatabase: available drivers: \nQSqlDatabase: an instance of QCoreApplication is required for loading driver plugins\nQSqlDatabasePrivate::removeDatabase: connection 'qt_sql_default_connection' is still in use, all queries will cease to work.\nQSqlDatabasePrivate::addDatabase: duplicate connection name 'qt_sql_default_connection', old connection removed.\n2014-11-09 20:58:37,266 (   ERROR) freeseer.framework.database             : Unable to create talkdb file.\nQSqlQuery::exec: database not open\nQSqlQuery::exec: database not open\nQSqlQuery::prepare: database not open\n2014-11-09 20:58:37,267 (    INFO) freeseer.framework.database             : Talk added: Alice and Eve - MITM presentation attacks, Time: \ufffd\ufffd\ufffd\ufffd 11\ufffd\ufffd 9 21:03:37 2014 - \ufffd\ufffd\ufffd\ufffd 11\ufffd\ufffd 9 21:08:37 2014\nQSqlQuery::exec: database not open
____________________________ test_get_presentation ____________________________

db = <freeseer.framework.database.QtDBConnector object at 0x0472D7F0>
presentation = <freeseer.framework.presentation.Presentation object at 0x04D72170>

    def test_get_presentation(db, presentation):
        """Assert that a presentation can be retrieved from the database by using its record id"""
        assert not db.get_presentation('1')
        db.insert_presentation(presentation)
        inserted_presentation = db.get_presentation('1')
>       assert inserted_presentation.title == presentation.title
E       AttributeError: 'NoneType' object has no attribute 'title'

freeseer\tests\framework\database\test_database.py:280: AttributeError
------------------------------- Captured stderr -------------------------------
2014-11-09 20:58:37,365 (   DEBUG) freeseer.framework.plugin               : Plugin manager initialized.\nQSqlDatabase: QSQLITE driver not loaded\nQSqlDatabase: available drivers: \nQSqlDatabase: an instance of QCoreApplication is required for loading driver plugins\nQSqlDatabasePrivate::removeDatabase: connection 'qt_sql_default_connection' is still in use, all queries will cease to work.\nQSqlDatabasePrivate::addDatabase: duplicate connection name 'qt_sql_default_connection', old connection removed.\n2014-11-09 20:58:37,365 (   ERROR) freeseer.framework.database             : Unable to create talkdb file.\nQSqlQuery::exec: database not open\nQSqlQuery::prepare: database not open\n2014-11-09 20:58:37,368 (    INFO) freeseer.framework.database             : Talk added: Alice and Eve - MITM presentation attacks, Time: \ufffd\ufffd\ufffd\ufffd 11\ufffd\ufffd 9 21:03:37 2014 - \ufffd\ufffd\ufffd\ufffd 11\ufffd\ufffd 9 21:08:37 2014\nQSqlQuery::exec: database not open
________________________ test_get_presentations_model _________________________

db = <freeseer.framework.database.QtDBConnector object at 0x04D56A90>
presentation = <freeseer.framework.presentation.Presentation object at 0x065DA910>

    def test_get_presentations_model(db, presentation):
        """Assert that a presentations model can be retrieved from the database"""
        db.insert_presentation(presentation)
    
        presentations_model = db.get_presentations_model()
>       assert presentations_model.rowCount() == 1
E       assert 0 == 1
E        +  where 0 = <built-in method rowCount of QSqlTableModel object at 0x065D23A0>()
E        +    where <built-in method rowCount of QSqlTableModel object at 0x065D23A0> = <PyQt4.QtSql.QSqlTableModel object at 0x065D23A0>.rowCount

freeseer\tests\framework\database\test_database.py:290: AssertionError
------------------------------- Captured stderr -------------------------------
2014-11-09 20:58:37,463 (   DEBUG) freeseer.framework.plugin               : Plugin manager initialized.\nQSqlDatabase: QSQLITE driver not loaded\nQSqlDatabase: available drivers: \nQSqlDatabase: an instance of QCoreApplication is required for loading driver plugins\nQSqlDatabasePrivate::removeDatabase: connection 'qt_sql_default_connection' is still in use, all queries will cease to work.\nQSqlDatabasePrivate::addDatabase: duplicate connection name 'qt_sql_default_connection', old connection removed.\n2014-11-09 20:58:37,463 (   ERROR) freeseer.framework.database             : Unable to create talkdb file.\nQSqlQuery::prepare: database not open\n2014-11-09 20:58:37,466 (    INFO) freeseer.framework.database             : Talk added: Alice and Eve - MITM presentation attacks, Time: \ufffd\ufffd\ufffd\ufffd 11\ufffd\ufffd 9 21:03:37 2014 - \ufffd\ufffd\ufffd\ufffd 11\ufffd\ufffd 9 21:08:37 2014
____________________ test_get_dates_from_event_room_model _____________________

db = <freeseer.framework.database.QtDBConnector object at 0x0668D370>
presentation = <freeseer.framework.presentation.Presentation object at 0x066A5B70>

    def test_get_dates_from_event_room_model(db, presentation):
        """Assert that a filtered by event and room presentation model can be retrieved from the database"""
        db.insert_presentation(presentation)
        dates_model = db.get_dates_from_event_room_model(presentation.event, presentation.room)
>       assert dates_model.rowCount() == 1
E       assert 0 == 1
E        +  where 0 = <built-in method rowCount of QSqlQueryModel object at 0x065D2DF0>()
E        +    where <built-in method rowCount of QSqlQueryModel object at 0x065D2DF0> = <PyQt4.QtSql.QSqlQueryModel object at 0x065D2DF0>.rowCount

freeseer\tests\framework\database\test_database.py:304: AssertionError
------------------------------- Captured stderr -------------------------------
2014-11-09 20:58:37,565 (   DEBUG) freeseer.framework.plugin               : Plugin manager initialized.\nQSqlDatabase: QSQLITE driver not loaded\nQSqlDatabase: available drivers: \nQSqlDatabase: an instance of QCoreApplication is required for loading driver plugins\nQSqlDatabasePrivate::removeDatabase: connection 'qt_sql_default_connection' is still in use, all queries will cease to work.\nQSqlDatabasePrivate::addDatabase: duplicate connection name 'qt_sql_default_connection', old connection removed.\n2014-11-09 20:58:37,565 (   ERROR) freeseer.framework.database             : Unable to create talkdb file.\nQSqlQuery::prepare: database not open\n2014-11-09 20:58:37,566 (    INFO) freeseer.framework.database             : Talk added: Alice and Eve - MITM presentation attacks, Time: \ufffd\ufffd\ufffd\ufffd 11\ufffd\ufffd 9 21:03:37 2014 - \ufffd\ufffd\ufffd\ufffd 11\ufffd\ufffd 9 21:08:37 2014\nQSqlQuery::exec: database not open
____________________________ test_get_rooms_model _____________________________

db = <freeseer.framework.database.QtDBConnector object at 0x066822B0>
presentation = <freeseer.framework.presentation.Presentation object at 0x067305B0>

    def test_get_rooms_model(db, presentation):
        """Assert that a model of presentation rooms can be retrieved from the database"""
        db.insert_presentation(presentation)
        rooms_model = db.get_rooms_model(presentation.event)
>       assert rooms_model.rowCount() == 1
E       assert 0 == 1
E        +  where 0 = <built-in method rowCount of QSqlQueryModel object at 0x06709800>()
E        +    where <built-in method rowCount of QSqlQueryModel object at 0x06709800> = <PyQt4.QtSql.QSqlQueryModel object at 0x06709800>.rowCount

freeseer\tests\framework\database\test_database.py:317: AssertionError
------------------------------- Captured stderr -------------------------------
2014-11-09 20:58:37,663 (   DEBUG) freeseer.framework.plugin               : Plugin manager initialized.\nQSqlDatabase: QSQLITE driver not loaded\nQSqlDatabase: available drivers: \nQSqlDatabase: an instance of QCoreApplication is required for loading driver plugins\nQSqlDatabasePrivate::removeDatabase: connection 'qt_sql_default_connection' is still in use, all queries will cease to work.\nQSqlDatabasePrivate::addDatabase: duplicate connection name 'qt_sql_default_connection', old connection removed.\n2014-11-09 20:58:37,664 (   ERROR) freeseer.framework.database             : Unable to create talkdb file.\nQSqlQuery::prepare: database not open\n2014-11-09 20:58:37,664 (    INFO) freeseer.framework.database             : Talk added: Alice and Eve - MITM presentation attacks, Time: \ufffd\ufffd\ufffd\ufffd 11\ufffd\ufffd 9 21:03:37 2014 - \ufffd\ufffd\ufffd\ufffd 11\ufffd\ufffd 9 21:08:37 2014\nQSqlQuery::exec: database not open
____________________________ test_get_talks_model _____________________________

db = <freeseer.framework.database.QtDBConnector object at 0x065B4EB0>
presentation = <freeseer.framework.presentation.Presentation object at 0x06739390>

    def test_get_talks_model(db, presentation):
        """Assert that a talk list model can be retrieved from the database"""
        empty_talks_model = db.get_talks_model(presentation.event, presentation.room, presentation.date)
        assert empty_talks_model.rowCount() == 0
    
        db.insert_presentation(presentation)
        talks_model = db.get_talks_model(presentation.event, presentation.room, presentation.date)
    
>       assert talks_model.rowCount() == 1
E       assert 0 == 1
E        +  where 0 = <built-in method rowCount of QSqlQueryModel object at 0x066471C0>()
E        +    where <built-in method rowCount of QSqlQueryModel object at 0x066471C0> = <PyQt4.QtSql.QSqlQueryModel object at 0x066471C0>.rowCount

freeseer\tests\framework\database\test_database.py:333: AssertionError
------------------------------- Captured stderr -------------------------------
2014-11-09 20:58:37,762 (   DEBUG) freeseer.framework.plugin               : Plugin manager initialized.\nQSqlDatabase: QSQLITE driver not loaded\nQSqlDatabase: available drivers: \nQSqlDatabase: an instance of QCoreApplication is required for loading driver plugins\nQSqlDatabasePrivate::removeDatabase: connection 'qt_sql_default_connection' is still in use, all queries will cease to work.\nQSqlDatabasePrivate::addDatabase: duplicate connection name 'qt_sql_default_connection', old connection removed.\n2014-11-09 20:58:37,762 (   ERROR) freeseer.framework.database             : Unable to create talkdb file.\nQSqlQuery::exec: database not open\nQSqlQuery::prepare: database not open\n2014-11-09 20:58:37,763 (    INFO) freeseer.framework.database             : Talk added: Alice and Eve - MITM presentation attacks, Time: \ufffd\ufffd\ufffd\ufffd 11\ufffd\ufffd 9 21:03:37 2014 - \ufffd\ufffd\ufffd\ufffd 11\ufffd\ufffd 9 21:08:37 2014\nQSqlQuery::exec: database not open
____________________________ test_upgrade_database ____________________________

db = <freeseer.framework.database.QtDBConnector object at 0x0668C1F0>
monkeypatch = <_pytest.monkeypatch.monkeypatch instance at 0x0674F800>

    def test_upgrade_database(db, monkeypatch):
        """Assert that older databases can be upgraded to the most recent schema"""
        QtSql.QSqlQuery('DROP TABLE presentations')
        # Create a 2x table.
        QtSql.QSqlQuery('''
            CREATE TABLE presentations
                (Id Integer Primary Key,
                 Title varchar(255),
                 Speaker varchar(100),
                 Description text,
                 Level varchar(25),
                 Event varchar(100),
                 Room varchar(25),
                 Time timestamp)
        ''')
        # Insert a 2x value.
        QtSql.QSqlQuery('''
            INSERT INTO presentations
            VALUES(1, 'An Old Title', 'Old Speaker', 'This is an example presentation from 2x', 'level 9',
                'Winter conference', '12', '2002-10-05')
        ''')
    
        # Mock out the db schema version to a 2x version.
        def mock_version(self):
            return 0
        monkeypatch.setattr(QtDBConnector, '_get_db_version_int', mock_version)
    
        db._update_version()
        presentation = db.get_presentation('1')
>       assert presentation
E       assert None

freeseer\tests\framework\database\test_database.py:371: AssertionError
------------------------------- Captured stderr -------------------------------
2014-11-09 20:58:37,859 (   DEBUG) freeseer.framework.plugin               : Plugin manager initialized.
QSqlDatabase: QSQLITE driver not loaded
QSqlDatabase: available drivers: 
QSqlDatabase: an instance of QCoreApplication is required for loading driver plugins
QSqlDatabasePrivate::removeDatabase: connection 'qt_sql_default_connection' is still in use, all queries will cease to work.
QSqlDatabasePrivate::addDatabase: duplicate connection name 'qt_sql_default_connection', old connection removed.
2014-11-09 20:58:37,859 (   ERROR) freeseer.framework.database             : Unable to create talkdb file.
QSqlQuery::exec: database not open
QSqlQuery::exec: database not open
QSqlQuery::exec: database not open
2014-11-09 20:58:37,861 (   DEBUG) freeseer.framework.database             : Updating to schema 300.
QSqlQuery::exec: database not open
2014-11-09 20:58:37,861 (    INFO) freeseer.framework.database             : table created
QSqlQuery::exec: database not open
QSqlQuery::exec: database not open
QSqlQuery::exec: database not open
QSqlQuery::exec: database not open
2014-11-09 20:58:37,861 (    INFO) freeseer.framework.database             : table created
QSqlQuery::exec: database not open
QSqlQuery::exec: database not open
QSqlQuery::exec: database not open
QSqlQuery::exec: database not open
2014-11-09 20:58:37,861 (    INFO) freeseer.framework.database             : Upgraded presentations database from version 0 to 310
QSqlQuery::exec: database not open
_____________________________ test_insert_failure _____________________________

db = <freeseer.framework.database.QtDBConnector object at 0x0674C390>

    def test_insert_failure(db):
        """Assert that a failure can be inserted in the database failure table"""
        failure = Failure(talkID='1',
                          comment='Fake presentation',
                          indicator='It is a fixture',
                          release=True)
    
        db.insert_failure(failure)
    
        report = db.get_report('1')
    
>       assert report.talkId == failure.talkId
E       AttributeError: 'NoneType' object has no attribute 'talkId'

freeseer\tests\framework\database\test_database_reporting.py:42: AttributeError
------------------------------- Captured stderr -------------------------------
2014-11-09 20:58:37,960 (   DEBUG) freeseer.framework.plugin               : Plugin manager initialized.
QSqlDatabase: QSQLITE driver not loaded
QSqlDatabase: available drivers: 
QSqlDatabase: an instance of QCoreApplication is required for loading driver plugins
QSqlDatabasePrivate::removeDatabase: connection 'qt_sql_default_connection' is still in use, all queries will cease to work.
QSqlDatabasePrivate::addDatabase: duplicate connection name 'qt_sql_default_connection', old connection removed.
2014-11-09 20:58:37,960 (   ERROR) freeseer.framework.database             : Unable to create talkdb file.
QSqlQuery::exec: database not open
2014-11-09 20:58:37,961 (    INFO) freeseer.framework.database             : Failure added: 1 - Fake presentation
QSqlQuery::exec: database not open
______________________________ test_get_reports _______________________________

db = <freeseer.framework.database.QtDBConnector object at 0x067A31F0>
presentation = <freeseer.framework.presentation.Presentation object at 0x0687A890>

    def test_get_reports(db, presentation):
        """Assert that failure reports may be fetched from the database"""
        failure1 = Failure(talkID='1',
                           comment='Fake presentation',
                           indicator='It is a fixture',
                           release=True)
        failure2 = Failure(talkID='2',
                           comment='Non-existant failure',
                           indicator='It is not in the database',
                           release=True)
    
        db.insert_presentation(presentation)
        db.insert_failure(failure1)
        db.insert_failure(failure2)  # There is no presentation associated with failure2.talkId
    
        reports = db.get_reports()
    
>       assert len(reports) == 2
E       assert 0 == 2
E        +  where 0 = len([])

freeseer\tests\framework\database\test_database_reporting.py:64: AssertionError
------------------------------- Captured stderr -------------------------------
2014-11-09 20:58:38,058 (   DEBUG) freeseer.framework.plugin               : Plugin manager initialized.\nQSqlDatabase: QSQLITE driver not loaded\nQSqlDatabase: available drivers: \nQSqlDatabase: an instance of QCoreApplication is required for loading driver plugins\nQSqlDatabasePrivate::removeDatabase: connection 'qt_sql_default_connection' is still in use, all queries will cease to work.\nQSqlDatabasePrivate::addDatabase: duplicate connection name 'qt_sql_default_connection', old connection removed.\n2014-11-09 20:58:38,058 (   ERROR) freeseer.framework.database             : Unable to create talkdb file.\nQSqlQuery::prepare: database not open\n2014-11-09 20:58:38,059 (    INFO) freeseer.framework.database             : Talk added: Alice and Eve - MITM presentation attacks, Time: \ufffd\ufffd\ufffd\ufffd 11\ufffd\ufffd 9 21:03:38 2014 - \ufffd\ufffd\ufffd\ufffd 11\ufffd\ufffd 9 21:08:38 2014\nQSqlQuery::exec: database not open\n2014-11-09 20:58:38,059 (    INFO) freeseer.framework.database             : Failure added: 1 - Fake presentation\nQSqlQuery::exec: database not open\n2014-11-09 20:58:38,059 (    INFO) freeseer.framework.database             : Failure added: 2 - Non-existant failure\nQSqlQuery::exec: database not open
_________________________ test_export_reports_to_csv __________________________

db = <freeseer.framework.database.QtDBConnector object at 0x0685E410>
tmpdir = local('c:\\users\\azure\\appdata\\local\\temp\\pytest-51\\test_export_reports_to_csv0')

    def test_export_reports_to_csv(db, tmpdir):
        """Assert that failure reports from the database can exported to a csv file"""
        presentation1 = Presentation(title='Fake it',
                                     speaker='John Doe',
                                     room='200')
        presentation2 = Presentation(title='A fake presentation',
                                     speaker='No one',
                                     room='Mystery')
    
        temp_csv = str(tmpdir.join('reports.csv'))
        failure1 = Failure(talkID='1',
                           comment='Fake presentation',
                           indicator='It is a fixture',
                           release=True)
        failure2 = Failure(talkID='2',
                           comment='Non-existant failure',
                           indicator='This is a fake failure',
                           release=True)
    
        db.insert_presentation(presentation1)
        db.insert_presentation(presentation2)
        db.insert_failure(failure1)
        db.insert_failure(failure2)
        db.export_reports_to_csv(temp_csv)
    
        expected_csv_lines = [
            'Title,Speaker,Abstract,Category,Event,Room,Date,StartTime,EndTime,Problem,Error\r\n',
            'Fake it,John Doe,,,Default,200,,,,It is a fixture,Fake presentation\r\n',
            'A fake presentation,No one,,,Default,Mystery,,,,This is a fake failure,Non-existant failure\r\n'
        ]
    
        with open(temp_csv) as fd:
            csv_lines = fd.readlines()
    
>       assert csv_lines == expected_csv_lines
E       assert ['Title,Speak...em,Error\r\n'] == ['Title,Speake... failure\r\n']
E         Right contains more items, first extra item: 'Fake it,John Doe,,,Default,200,,,,It is a fixture,Fake presentation\r\n'

freeseer\tests\framework\database\test_database_reporting.py:105: AssertionError
------------------------------- Captured stderr -------------------------------
2014-11-09 20:58:38,154 (   DEBUG) freeseer.framework.plugin               : Plugin manager initialized.
QSqlDatabase: QSQLITE driver not loaded
QSqlDatabase: available drivers: 
QSqlDatabase: an instance of QCoreApplication is required for loading driver plugins
QSqlDatabasePrivate::removeDatabase: connection 'qt_sql_default_connection' is still in use, all queries will cease to work.
QSqlDatabasePrivate::addDatabase: duplicate connection name 'qt_sql_default_connection', old connection removed.
2014-11-09 20:58:38,155 (   ERROR) freeseer.framework.database             : Unable to create talkdb file.
QSqlQuery::prepare: database not open
2014-11-09 20:58:38,157 (    INFO) freeseer.framework.database             : Talk added: John Doe - Fake it, Time:  - 
QSqlQuery::prepare: database not open
2014-11-09 20:58:38,157 (    INFO) freeseer.framework.database             : Talk added: No one - A fake presentation, Time:  - 
QSqlQuery::exec: database not open
2014-11-09 20:58:38,157 (    INFO) freeseer.framework.database             : Failure added: 1 - Fake presentation
QSqlQuery::exec: database not open
2014-11-09 20:58:38,157 (    INFO) freeseer.framework.database             : Failure added: 2 - Non-existant failure
QSqlQuery::exec: database not open
_____________________________ test_update_failure _____________________________

db = <freeseer.framework.database.QtDBConnector object at 0x067393D0>

    def test_update_failure(db):
        """Assert that a given failure can be updated without causing side effects, in the database"""
        failure1 = Failure(talkID='1',
                           comment='Fake presentation',
                           indicator='It is a fixture',
                           release=True)
        failure2 = Failure(talkID='1',
                           comment='Super fake presentation',
                           indicator='It is not really real',
                           release=True)
    
        db.insert_failure(failure1)  # make sure that failure1 is actually in the database
>       assert db.get_report('1').comment == failure1.comment
E       AttributeError: 'NoneType' object has no attribute 'comment'

freeseer\tests\framework\database\test_database_reporting.py:135: AttributeError
------------------------------- Captured stderr -------------------------------
2014-11-09 20:58:38,358 (   DEBUG) freeseer.framework.plugin               : Plugin manager initialized.
QSqlDatabase: QSQLITE driver not loaded
QSqlDatabase: available drivers: 
QSqlDatabase: an instance of QCoreApplication is required for loading driver plugins
QSqlDatabasePrivate::removeDatabase: connection 'qt_sql_default_connection' is still in use, all queries will cease to work.
QSqlDatabasePrivate::addDatabase: duplicate connection name 'qt_sql_default_connection', old connection removed.
2014-11-09 20:58:38,358 (   ERROR) freeseer.framework.database             : Unable to create talkdb file.
QSqlQuery::exec: database not open
2014-11-09 20:58:38,358 (    INFO) freeseer.framework.database             : Failure added: 1 - Fake presentation
QSqlQuery::exec: database not open
__________________ test_add_talks_from_rss[feed0-expected0] ___________________

db = <freeseer.framework.database.QtDBConnector object at 0x0695D890>
feed = ('D:\\Programs\\freeseer\\src\\freeseer\\tests\\framework\\database\\..\\..\\resources\\sample_rss_data\\summercamp2010.rss', 'http://fosslc.org/drupal/presentations_rss/summercamp2010')
expected = [(<freeseer.framework.presentation.Presentation object at 0x04087930>, True)]

    @pytest.mark.httpretty
    @pytest.mark.parametrize("feed, expected", [
        (feed_2010, [(presentation1, True)]),
        (feed_2011, [
            (presentation1, False),
            (presentation2, True),
            (presentation3, True)
        ]),
        (feed_2011, [(Presentation('Fake Title', 'Fake Speaker'), False)])
    ])
    def test_add_talks_from_rss(db, feed, expected):
        """Assert that presentations can be added from an rss feed"""
        feed_filename, feed_url = feed
    
        with open(feed_filename) as presentation_rss_file:
            feed_data = presentation_rss_file.read()
    
        # Monkey patch GET request.
        httpretty.register_uri(httpretty.GET, feed_url, body=feed_data, content_type='application/rss+xml')
        db.add_talks_from_rss(feed_url)
        for presentation, expectation in expected:
>           assert db.presentation_exists(presentation) == expectation
E           assert <bound method QtDBConnector.presentation_exists of <freeseer.framework.database.QtDBConnector object at 0x0695D890>>(<freeseer.framework.presentation.Presentation object at 0x04087930>) == True
E            +  where <bound method QtDBConnector.presentation_exists of <freeseer.framework.database.QtDBConnector object at 0x0695D890>> = <freeseer.framework.database.QtDBConnector object at 0x0695D890>.presentation_exists

freeseer\tests\framework\database\test_rss_database.py:66: AssertionError
------------------------------- Captured stderr -------------------------------
2014-11-09 20:58:38,454 (   DEBUG) freeseer.framework.plugin               : Plugin manager initialized.\nQSqlDatabase: QSQLITE driver not loaded\nQSqlDatabase: available drivers: \nQSqlDatabase: an instance of QCoreApplication is required for loading driver plugins\nQSqlDatabasePrivate::removeDatabase: connection 'qt_sql_default_connection' is still in use, all queries will cease to work.\nQSqlDatabasePrivate::addDatabase: duplicate connection name 'qt_sql_default_connection', old connection removed.\n2014-11-09 20:58:38,456 (   ERROR) freeseer.framework.database             : Unable to create talkdb file.\nQSqlQuery::prepare: database not open\n2014-11-09 20:58:39,036 (    INFO) freeseer.framework.database             : Talk added: Andrew Ross - Managing map data in a database, Time: 2010-05-14T10:45 - \nQSqlQuery::prepare: database not open\n2014-11-09 20:58:39,036 (    INFO) freeseer.framework.database             : Talk added: Aaron Seigo - The KDE 4 Show: An Overview of Where the Free Software Desktop Is Going, Time: 2010-05-23T08:54 - \nQSqlQuery::prepare: database not open\n2014-11-09 20:58:39,036 (    INFO) freeseer.framework.database             : Talk added: Aaron Seigo - Managing a Meta-Project: A KDE Case Study, Time: 2010-05-15T22:21 - \nQSqlQuery::prepare: database not open\n2014-11-09 20:58:39,036 (    INFO) freeseer.framework.database             : Talk added: Dru Lavigne - Getting Started in an Open Source Community, Time: 2010-08-14T11:25 - \nQSqlQuery::prepare: database not open\n2014-11-09 20:58:39,036 (    INFO) freeseer.framework.database             : Talk added: David Maxwell - Software speaks - are you listening?, Time: 2010-05-31T17:12 - \nQSqlQuery::prepare: database not open\n2014-11-09 20:58:39,036 (    INFO) freeseer.framework.database             : Talk added: David Maxwell - The NetBSD Way, Time: 2010-05-31T16:36 - \nQSqlQuery::prepare: database not open\n2014-11-09 20:58:39,036 (    INFO) freeseer.framework.database             : Talk added: Doug Inkster - Ingres VectorWise - Database on Steroids, Time: None - \nQSqlQuery::prepare: database not open\n2014-11-09 20:58:39,036 (    INFO) freeseer.framework.database             : Talk added: Emma Jane Hogbin - Basic Design for Drupal, Time: 2010-08-14T13:33 - \nQSqlQuery::prepare: database not open\n2014-11-09 20:58:39,038 (    INFO) freeseer.framework.database             : Talk added: Geoff Zeiss - Open Web-searchable GeoData, Time: None - \nQSqlQuery::prepare: database not open\n2014-11-09 20:58:39,038 (    INFO) freeseer.framework.database             : Talk added: James Westby - Linaro: what is it, and why should it matter to you, Time: None - \nQSqlQuery::prepare: database not open\n2014-11-09 20:58:39,038 (    INFO) freeseer.framework.database             : Talk added: Mekki MacAulay - Every Eyeball Has Value!: The User as a Passive Participant in Open Source Ecosystems, Time: None - \nQSqlQuery::prepare: database not open\n2014-11-09 20:58:39,038 (    INFO) freeseer.framework.database             : Talk added: Pascal St-Jean - Wiki Based Collaborative Platform-Driven Applications By End-Users and Business Analysts, Time: None - \nQSqlQuery::prepare: database not open\n2014-11-09 20:58:39,039 (    INFO) freeseer.framework.database             : Talk added: Pete Forde - Data Literacy (or, how to save the world and get crazy rich at the same time), Time: 2010-06-26T09:53 - \nQSqlQuery::prepare: database not open\n2014-11-09 20:58:39,039 (    INFO) freeseer.framework.database             : Talk added: Russell McOrmond - Why legal protection for technical measures is controversial, Time: None - \nQSqlQuery::prepare: database not open\n2014-11-09 20:58:39,039 (    INFO) freeseer.framework.database             : Talk added: Rohit V Kapoor - SOA Wizardry with JBoss and Open Source Software, Time: None - \nQSqlQuery::prepare: database not open\n2014-11-09 20:58:39,039 (    INFO) freeseer.framework.database             : Talk added: Scott Chacon - Git 101, Time: 2010-08-14T13:50 - \nQSqlQuery::prepare: database not open\n2014-11-09 20:58:39,039 (    INFO) freeseer.framework.database             : Talk added: Shahzad Khan - Open Source Industrial Grade Search Engine Technologies, Time: None - \nQSqlQuery::prepare: database not open\n2014-11-09 20:58:39,039 (    INFO) freeseer.framework.database             : Talk added: Steve Singer - Introduction to OpenStreetMap, Time: None - \nQSqlQuery::prepare: database not open\n2014-11-09 20:58:39,039 (    INFO) freeseer.framework.database             : Talk added: Thomas Prowse - Commons Knowledge\u2122 - bringing clarity to the legal complexity of open source software licenses, Time: 2010-05-31T16:32 - \nQSqlQuery::prepare: database not open\n2014-11-09 20:58:39,039 (    INFO) freeseer.framework.database             : Talk added: Wayne Beaton - Helios: The Eclipse Simultaneous Release, Time: None - \nQSqlQuery::exec: database not open
__________________ test_add_talks_from_rss[feed1-expected1] ___________________

db = <freeseer.framework.database.QtDBConnector object at 0x0691B9F0>
feed = ('D:\\Programs\\freeseer\\src\\freeseer\\tests\\framework\\database\\..\\..\\resources\\sample_rss_data\\sc2011.rss', 'http://fosslc.org/drupal/presentations/sc2011')
expected = [(<freeseer.framework.presentation.Presentation object at 0x04087930>, False), (<freeseer.framework.presentation.Presentation object at 0x04087790>, True), (<freeseer.framework.presentation.Presentation object at 0x040876F0>, True)]

    @pytest.mark.httpretty
    @pytest.mark.parametrize("feed, expected", [
        (feed_2010, [(presentation1, True)]),
        (feed_2011, [
            (presentation1, False),
            (presentation2, True),
            (presentation3, True)
        ]),
        (feed_2011, [(Presentation('Fake Title', 'Fake Speaker'), False)])
    ])
    def test_add_talks_from_rss(db, feed, expected):
        """Assert that presentations can be added from an rss feed"""
        feed_filename, feed_url = feed
    
        with open(feed_filename) as presentation_rss_file:
            feed_data = presentation_rss_file.read()
    
        # Monkey patch GET request.
        httpretty.register_uri(httpretty.GET, feed_url, body=feed_data, content_type='application/rss+xml')
        db.add_talks_from_rss(feed_url)
        for presentation, expectation in expected:
>           assert db.presentation_exists(presentation) == expectation
E           assert <bound method QtDBConnector.presentation_exists of <freeseer.framework.database.QtDBConnector object at 0x0691B9F0>>(<freeseer.framework.presentation.Presentation object at 0x04087790>) == True
E            +  where <bound method QtDBConnector.presentation_exists of <freeseer.framework.database.QtDBConnector object at 0x0691B9F0>> = <freeseer.framework.database.QtDBConnector object at 0x0691B9F0>.presentation_exists

freeseer\tests\framework\database\test_rss_database.py:66: AssertionError
------------------------------- Captured stderr -------------------------------
2014-11-09 20:58:39,134 (   DEBUG) freeseer.framework.plugin               : Plugin manager initialized.
QSqlDatabase: QSQLITE driver not loaded
QSqlDatabase: available drivers: 
QSqlDatabase: an instance of QCoreApplication is required for loading driver plugins
QSqlDatabasePrivate::removeDatabase: connection 'qt_sql_default_connection' is still in use, all queries will cease to work.
QSqlDatabasePrivate::addDatabase: duplicate connection name 'qt_sql_default_connection', old connection removed.
2014-11-09 20:58:39,134 (   ERROR) freeseer.framework.database             : Unable to create talkdb file.
2014-11-09 20:58:39,753 (    INFO) freeseer.framework.database             : RSS: No data found.
QSqlQuery::exec: database not open
QSqlQuery::exec: database not open
____________________________ TestCli.test_add_talk ____________________________

args = (<freeseer.tests.frontend.test_cli_talk.TestCli testMethod=test_add_talk>, <MagicMock name='get_database' id='112367952'>)
keywargs = {}, extra_args = [<MagicMock name='get_database' id='112367952'>]
entered_patchers = [<mock._patch object at 0x03F5DE90>]
exc_info = (<type 'exceptions.AssertionError'>, AssertionError("PyQt4.QtCore.QString(u'') != u'test title'",), <traceback object at 0x068D27B0>)
patching = <mock._patch object at 0x03F5DE90>
arg = <MagicMock name='get_database' id='112367952'>

    @wraps(func)
    def patched(*args, **keywargs):
        # don't use a with here (backwards compatability with Python 2.4)
        extra_args = []
        entered_patchers = []
    
        # can't use try...except...finally because of Python 2.4
        # compatibility
        exc_info = tuple()
        try:
            try:
                for patching in patched.patchings:
                    arg = patching.__enter__()
                    entered_patchers.append(patching)
                    if patching.attribute_name is not None:
                        keywargs.update(arg)
                    elif patching.new is DEFAULT:
                        extra_args.append(arg)
    
                args += tuple(extra_args)
>               return func(*args, **keywargs)

d:\Python27\lib\site-packages\mock.py:1201: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <freeseer.tests.frontend.test_cli_talk.TestCli testMethod=test_add_talk>
mock_profile = <MagicMock name='get_database' id='112367952'>

    @patch.object(Profile, 'get_database')
    def test_add_talk(self, mock_profile):
        """Test adding a talk"""
        mock_profile.return_value = self.db
        args = shlex.split('talk add -t "test title" -s "john doe" -e testing -r rm123')
        sys.argv[1:] = args
        cli.parse_args(self.parser, args)
        talks = self.db.get_talks()
        talks.next()  # Point to talk data
        talks.next()  # Skip first test entry
        talks.next()  # Skip second test entry
        record = talks.record()
    
>       self.assertEqual(talks.value(record.indexOf('title')).toString(), u'test title')
E       AssertionError: PyQt4.QtCore.QString(u'') != u'test title'

freeseer\tests\frontend\test_cli_talk.py:71: AssertionError
------------------------------- Captured stderr -------------------------------
2014-11-09 20:58:40,272 (   DEBUG) freeseer.framework.plugin               : Plugin manager initialized.
QSqlDatabase: QSQLITE driver not loaded
QSqlDatabase: available drivers: 
QSqlDatabase: an instance of QCoreApplication is required for loading driver plugins
QSqlDatabasePrivate::addDatabase: duplicate connection name 'qt_sql_default_connection', old connection removed.
2014-11-09 20:58:40,272 (   ERROR) freeseer.framework.database             : Unable to create talkdb file.
QSqlQuery::prepare: database not open
2014-11-09 20:58:40,272 (    INFO) freeseer.framework.database             : Talk added: test speaker - test title 1, Time:  - 
QSqlQuery::prepare: database not open
2014-11-09 20:58:40,272 (    INFO) freeseer.framework.database             : Talk added: test speaker - test title 2, Time:  - 
QSqlQuery::prepare: database not open
2014-11-09 20:58:40,275 (    INFO) freeseer.framework.database             : Talk added: john doe - test title, Time:  - 
QSqlQuery::exec: database not open
QSqlQuery::value: not positioned on a valid record
____________________ TestYoutubeFrontend.test_get_defaults ____________________

self = <freeseer.tests.frontend.upload.test_youtube.TestYoutubeFrontend testMethod=test_get_defaults>

    def test_get_defaults(self):
        """Test get_defaults, should always return a dict"""
        home = os.getenv('HOME')
        expected = {
            'client_secrets': '{}/.freeseer/client_secrets.json'.format(home),
            'video_directory': '{}/Videos'.format(home),
            'oauth2_token': '{}/.freeseer/oauth2_token.json'.format(home)
        }
        actual = youtube.get_defaults()
>       self.assertDictEqual(actual, expected)
E       AssertionError: {'client_secrets': 'c:\\Users\\Azure\\.freeseer\\client_secrets.json', 'video_di [truncated]... != {'client_secrets': 'c:/Users/Azure/.freeseer/client_secrets.json', 'video_direct [truncated]...
E       - {'client_secrets': 'c:\\Users\\Azure\\.freeseer\\client_secrets.json',
E       ?                       ^^     ^^     ^^         ^^
E       
E       + {'client_secrets': 'c:/Users/Azure/.freeseer/client_secrets.json',
E       ?                       ^     ^     ^         ^
E       
E       -  'oauth2_token': 'c:\\Users\\Azure\\.freeseer\\oauth2_token.json',
E       ?                     ^^     ^^     ^^         ^^
E       
E       +  'oauth2_token': 'c:/Users/Azure/.freeseer/oauth2_token.json',
E       ?                     ^     ^     ^         ^
E       
E          'video_directory': 'c:/Users/Azure/Videos'}

freeseer\tests\frontend\upload\test_youtube.py:57: AssertionError
--------------- coverage: platform win32, python 2.7.8-final-0 ----------------
Name                                                    Stmts   Miss  Cover
---------------------------------------------------------------------------
freeseer\__init__                                          33     33     0%
freeseer\__main__                                           2      2     0%
freeseer\framework\__init__                                 0      0   100%
freeseer\framework\area_selector                           89     66    26%
freeseer\framework\config\__init__                          1      1     0%
freeseer\framework\config\core                             80     38    53%
freeseer\framework\config\exceptions                       16     12    25%
freeseer\framework\config\options                          66     34    48%
freeseer\framework\config\persist\__init__                  2      2     0%
freeseer\framework\config\persist\configparser             23      5    78%
freeseer\framework\config\persist\jsonstorage              30      8    73%
freeseer\framework\config\profile                          52     18    65%
freeseer\framework\database                               240     88    63%
freeseer\framework\failure                                 10      6    40%
freeseer\framework\multimedia                             233     49    79%
freeseer\framework\plugin                                 183    130    29%
freeseer\framework\presentation                            24     15    38%
freeseer\framework\qt_key_grabber                          52     52     0%
freeseer\framework\util                                    70     10    86%
freeseer\framework\youtube                                 80     41    49%
freeseer\frontend\__init__                                  0      0   100%
freeseer\frontend\cli                                     183     94    49%
freeseer\frontend\configtool\AVWidget                     114      5    96%
freeseer\frontend\configtool\ConfigToolWidget              42      7    83%
freeseer\frontend\configtool\GeneralWidget                 61      5    92%
freeseer\frontend\configtool\PluginWidget                  67     21    69%
freeseer\frontend\configtool\__init__                       0      0   100%
freeseer\frontend\configtool\configtool                   352    113    68%
freeseer\frontend\controller\__init__                       4      0   100%
freeseer\frontend\controller\recording                    122     16    87%
freeseer\frontend\controller\server                        28      3    89%
freeseer\frontend\controller\validate                      20      1    95%
freeseer\frontend\qtcommon\AboutDialog                     33      2    94%
freeseer\frontend\qtcommon\AboutWidget                     89     14    84%
freeseer\frontend\qtcommon\FreeseerApp                    111      5    95%
freeseer\frontend\qtcommon\__init__                         0      0   100%
freeseer\frontend\qtcommon\resource                         9      1    89%
freeseer\frontend\record\AutoRecordWidget                  82     33    60%
freeseer\frontend\record\RecordingController               44     25    43%
freeseer\frontend\record\RecordingWidget                  146     10    93%
freeseer\frontend\record\ReportDialog                      74      2    97%
freeseer\frontend\record\__init__                           0      0   100%
freeseer\frontend\record\record                           467    237    49%
freeseer\frontend\reporteditor\ReportEditorWidget          73      5    93%
freeseer\frontend\reporteditor\__init__                     0      0   100%
freeseer\frontend\reporteditor\reporteditor               135     49    64%
freeseer\frontend\talkeditor\CommandButtons                48      6    88%
freeseer\frontend\talkeditor\ImportTalksWidget             58      6    90%
freeseer\frontend\talkeditor\NewTalkWidget                 28      0   100%
freeseer\frontend\talkeditor\TalkDetailsWidget            107      6    94%
freeseer\frontend\talkeditor\__init__                       0      0   100%
freeseer\frontend\talkeditor\talkeditor                   372    161    57%
freeseer\frontend\upload\__init__                           0      0   100%
freeseer\frontend\upload\youtube                           51     15    71%
freeseer\plugins\__init__                                   0      0   100%
freeseer\plugins\audioinput\__init__                        0      0   100%
freeseer\plugins\audioinput\alsasrc\__init__               16      7    56%
freeseer\plugins\audioinput\audiotestsrc\__init__          16      0   100%
freeseer\plugins\audioinput\autoaudiosrc\__init__          16      0   100%
freeseer\plugins\audioinput\jackaudiosrc\__init__          59     32    46%
freeseer\plugins\audioinput\jackaudiosrc\widget            22     15    32%
freeseer\plugins\audioinput\pulsesrc\__init__              53     30    43%
freeseer\plugins\audioinput\pulsesrc\widget                15      7    53%
freeseer\plugins\audiomixer\__init__                        0      0   100%
freeseer\plugins\audiomixer\audiopassthrough\__init__      68     29    57%
freeseer\plugins\audiomixer\audiopassthrough\widget        33     20    39%
freeseer\plugins\audiomixer\multiaudio\__init__            96     54    44%
freeseer\plugins\audiomixer\multiaudio\widget              46     34    26%
freeseer\plugins\importer\__init__                          0      0   100%
freeseer\plugins\importer\csv_importer                     19      2    89%
freeseer\plugins\importer\rss_feedparser\__init__          37      0   100%
freeseer\plugins\output\__init__                            0      0   100%
freeseer\plugins\output\audiofeedback\__init__             43     11    74%
freeseer\plugins\output\audiofeedback\widget               15      8    47%
freeseer\plugins\output\ogg_icecast\__init__              104     73    30%
freeseer\plugins\output\ogg_icecast\widget                 25     17    32%
freeseer\plugins\output\ogg_output\__init__               103     23    78%
freeseer\plugins\output\ogg_output\widget                  30     21    30%
freeseer\plugins\output\raw_output\__init__                44      0   100%
freeseer\plugins\output\rtmp_streaming\__init__           383    290    24%
freeseer\plugins\output\videopreview\__init__              57     18    68%
freeseer\plugins\output\videopreview\widget                20     13    35%
freeseer\plugins\output\webm_output\__init__               63     49    22%
freeseer\plugins\videoinput\__init__                        0      0   100%
freeseer\plugins\videoinput\desktop\__init__              101     52    49%
freeseer\plugins\videoinput\desktop\widget                 26     16    38%
freeseer\plugins\videoinput\firewiresrc\__init__           66     42    36%
freeseer\plugins\videoinput\firewiresrc\widget             14      7    50%
freeseer\plugins\videoinput\usbsrc\__init__                71     33    54%
freeseer\plugins\videoinput\usbsrc\widget                  14      7    50%
freeseer\plugins\videoinput\videotestsrc\__init__          51     19    63%
freeseer\plugins\videoinput\videotestsrc\widget            22     13    41%
freeseer\plugins\videomixer\__init__                        0      0   100%
freeseer\plugins\videomixer\pip\__init__                  128     73    43%
freeseer\plugins\videomixer\pip\widget                     44     32    27%
freeseer\plugins\videomixer\videopassthrough\__init__     115     52    55%
freeseer\plugins\videomixer\videopassthrough\widget        60     43    28%
freeseer\settings                                          22     22     0%
---------------------------------------------------------------------------
TOTAL                                                    6323   2616    59%
======== 35 failed, 213 passed, 1 skipped, 1 xfailed in 22.35 seconds =========
